#!/usr/bin/python
# vim: set fileencoding=utf-8
# fourth2json: analyze FourthParty output to produce JSON reports
#   Copyright â’¸ 2012  Clint Adams

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

import json
import sqlite3
import sys
import Cookie
import re

#import cookiecheck

def db_connect(fn):
    conn = sqlite3.connect(fn)
    return conn

def db_query(conn, query):
    c = conn.cursor()
    c.execute(query)
    return c

def domain_to_company_name(domain, companies):
    try:
        return companies[domain]
    except KeyError:
        return "UNKNOWN"

def assume_that_everything_is_a_tracking_cookie(name, value, url, referrer, expiration, domain):
    return True

if len(sys.argv) != 4:
    print >> sys.stderr, 'Usage: ' + sys.argv[0] + ' defaultsfile dntfile beeftacofile'
    sys.exit(1)

output = {}
topid_cookies = []
thirdpartycount_per_first = {}
thirdpartycount_per_third = {}

ipRE = re.compile(r"^https?://(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/")
domRE = re.compile(r"^https?://(.*?)/")

companies = json.load(open('companyNames.json')) # FIXME: this shouldn't need to be in the current dir

files = {
        'defaults': sys.argv[1],
        'dnt': sys.argv[2],
        'beeftaco': sys.argv[3]
        }

for phase, fn in files.items():
    conn = db_connect(fn)
    top_pages = dict(db_query(conn, 'select id,location from pages where id=top_id'))
    c = db_query(conn, 'select top_id, value, hr.url, hr.referrer from http_response_headers hrh left join http_responses hr on hrh.http_response_id=hr.id left join pages p on hr.page_id=p.id where name="Set-Cookie"')

    def sld_from_domain(domain):
        return '.'.join(domain.split('.')[-2:])

    def domain_from_top_id(top_id, top_pages):
        try:
            tid = int(top_id)
        except TypeError:
            tid = 0
        try:
            url = str(top_pages[tid])
        except KeyError:
            url = ""
        iResult = ipRE.match(url)
        domResult = domRE.match(url)
        if iResult:
            return iResult.group(1)
        elif domResult:
            fqdn = domResult.group(1)
            return sld_from_domain(fqdn)
        else:
            return "UNKNOWN"

    for row in c:
        C = Cookie.SimpleCookie()
        try:
            C.load(str(row[1]))
            cookies = {}
            for cookie in C.items():
                fields = dict(cookie[1])
                fields['value'] = cookie[1].value
                #fields['__TRC_heuristic_'] = cookiecheck.cookiecheck(cookie[1].key, cookie[1].value, row[2], row[3], fields['expires'], fields['domain']) # FIXME: hole here
                fields['__TRC_heuristic_'] = assume_that_everything_is_a_tracking_cookie(cookie[1].key, cookie[1].value, row[2], row[3], fields['expires'], fields['domain']) # FIXME: hole here
                if row[0]:
                    fields['__TRC_destination_domain'] = domain_from_top_id(row[0], top_pages)
                else:
                    fields['__TRC_destination_domain'] = "UNKNOWN"
                fields['__TRC_destination_companyname'] = domain_to_company_name(fields['__TRC_destination_domain'], companies)
                fields['__TRC_cookie_domain'] = sld_from_domain(fields['domain'])
                fields['__TRC_cookie_companyname'] = domain_to_company_name(fields['__TRC_cookie_domain'], companies)
                cookies[cookie[1].key] = fields
                if fields['__TRC_destination_domain'] != fields['__TRC_cookie_domain']: # FIXME: not the right heuristic to determine 3p
                    try:
                        fpd = thirdpartycount_per_first[fields['__TRC_destination_domain']]
                        fpd[phase] += 1
                    except KeyError:
                        fpd = dict([(k,0) for k in files.keys()])
                        fpd[phase] = 1
                    thirdpartycount_per_first[fields['__TRC_destination_domain']] = fpd

                    try:
                        tpd = thirdpartycount_per_third[fields['__TRC_cookie_domain']]
                        tpd[phase] += 1
                    except KeyError:
                        tpd = dict([(k,0) for k in files.keys()])
                        tpd[phase] = 1
                    thirdpartycount_per_third[fields['__TRC_cookie_domain']] = fpd

                topid_cookies.append(cookies) # FIXME?
        except Cookie.CookieError:
            print >> sys.stderr, "python's Cookie seems broken; discarding cookie entirely"
    output[phase] = topid_cookies

#j = json.dumps(thirdpartycount_per_first, indent=4)
j = json.dumps(thirdpartycount_per_third, indent=4)
print j
